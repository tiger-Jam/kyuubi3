// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.jsに必要なテーブル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Kyuubi独自のテーブル
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // リレーション
  accounts    Account[]
  sessions    Session[]
  tails       Tail[]

  @@map("users")
}

// Tailモデル（vault相当）
model Tail {
  id          String   @id @default(cuid())
  name        String   // "programming-study"  
  displayName String   // "プログラミング学習"
  description String?  // Tailの説明
  filePath    String   // ~/Documents/Tails/programming-study.tail/
  userId      String
  
  // ファイル同期用
  lastSyncAt     DateTime?
  fileModifiedAt DateTime?  // ファイルシステム最終更新
  dbModifiedAt   DateTime   @updatedAt  // DB最終更新
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // リレーション
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  articles    Article[]
  assets      Asset[]
  tags        Tag[]
  collections Collection[]
  
  @@map("tails")
  @@unique([userId, name])
  @@index([userId])
}

model Article {
  id          String   @id @default(cuid())
  tailId      String
  parentId    String?  // 親記事のID
  
  // 階層情報
  path        String   // "projects/kyuubi/docs/article.md"
  level       Int      @default(0)  // 0-5の制限
  order       Int      @default(0)  // 同階層での並び順
  
  // 基本情報
  title       String
  content     String
  isFolder    Boolean  @default(false)  // フォルダ記事かどうか
  
  // 追加情報
  isPublic    Boolean  @default(false)
  slug        String?
  wordCount   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // リレーション
  tail        Tail     @relation(fields: [tailId], references: [id], onDelete: Cascade)
  parent      Article? @relation("ArticleHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Article[] @relation("ArticleHierarchy")
  
  // タグとの多対多関連
  tags        ArticleTag[]
  collections CollectionArticle[]
  
  @@map("articles")
  @@index([tailId, parentId])
  @@index([tailId, path])
  @@index([tailId, level, order])
  @@unique([tailId, path])
}

// アセット（添付ファイル）管理
model Asset {
  id          String   @id @default(cuid())
  tailId      String
  filePath    String   // "assets/images/screenshot.png"
  type        String   // "image", "file", "document"
  size        Int      // ファイルサイズ（バイト）
  mimeType    String?  // "image/png", "application/pdf" など
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // リレーション
  tail        Tail     @relation(fields: [tailId], references: [id], onDelete: Cascade)
  
  @@map("assets")
  @@index([tailId])
  @@unique([tailId, filePath])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   
  tailId    String   // Tailごとにタグを管理
  color     String?  // タグの色（オプション）
  createdAt DateTime @default(now())
  
  // Tailとの関連
  tail      Tail     @relation(fields: [tailId], references: [id], onDelete: Cascade)
  
  // 記事との多対多関連
  articles  ArticleTag[]
  
  @@map("tags")
  @@unique([tailId, name])
  @@index([tailId])
}

model ArticleTag {
  articleId String
  tagId     String
  
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([articleId, tagId])
  @@map("article_tags")
}

// 将来的な拡張のためのテーブル
model Collection {
  id          String   @id @default(cuid())
  tailId      String   // Tailごとにコレクションを管理
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Tailとの関連
  tail        Tail     @relation(fields: [tailId], references: [id], onDelete: Cascade)
  
  // 記事コレクションとの関連
  articles    CollectionArticle[]
  
  @@map("collections")
  @@unique([tailId, name])
  @@index([tailId])
}

model CollectionArticle {
  collectionId String
  articleId    String
  order        Int      @default(0)
  addedAt      DateTime @default(now())
  
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  article      Article    @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  @@id([collectionId, articleId])
  @@map("collection_articles")
}